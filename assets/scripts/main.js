// Generated by CoffeeScript 1.10.0
(function() {
  var Cupid, Results, button, compareEngine, div, form, h1, input, label, ref, span;

  ref = React.DOM, div = ref.div, h1 = ref.h1, form = ref.form, span = ref.span, label = ref.label, input = ref.input, button = ref.button;

  compareEngine = function(yourName, matesName) {
    var friend, i, intersect, j, len, len1, letter, score, you;
    you = yourName.split("").sort();
    friend = matesName.split("").sort();
    intersect = [];
    if (you.length > friend.length) {
      for (i = 0, len = you.length; i < len; i++) {
        letter = you[i];
        if (friend.indexOf(letter) !== -1) {
          intersect.push(letter);
        }
      }
    } else {
      for (j = 0, len1 = friend.length; j < len1; j++) {
        letter = friend[j];
        if (you.indexOf(letter) !== -1) {
          intersect.push(letter);
        }
      }
    }
    score = (intersect.length / (+you.length + friend.length)) * 100;
    return Math.ceil(100 - score - (+you.length + friend.length));
  };

  Results = React.createClass({displayName: "Results",
    getInitialState: function() {
      return {
        progress: 0
      };
    },
    render: function() {
      var $this, x;
      $this = this;
      window.animateProgress = function() {
        $this.setState({
          progress: $this.props.score
        });
      };
      setTimeout(window.animateProgress, 200);
      return div({
        className: "results"
      }, div({
        className: "radial-progress",
        "data-progress": this.state.progress
      }, div({
        className: "circle"
      }, div({
        className: "mask full"
      }, div({
        className: "fill"
      })), div({
        className: "mask half"
      }, div({
        className: "fill"
      }), div({
        className: "fill fix"
      })), div({
        className: "shadow"
      })), div({
        className: "inset"
      }, div({
        className: "percentage"
      }, div({
        className: "numbers"
      }, span(null, "-"), (function() {
        var i, results;
        results = [];
        for (x = i = 0; i < 100; x = i += 1) {
          results.push(span({
            key: x
          }, x + "%"));
        }
        return results;
      })())))));
    }
  });

  Cupid = React.createClass({displayName: "Cupid",
    getInitialState: function() {
      return {
        yourName: "",
        matesName: "",
        showResults: false,
        score: 0,
        errorMessage: ""
      };
    },
    handleyourNameChange: function(e) {
      this.setState({
        yourName: e.target.value
      });
      this.setState({
        showResults: false
      });
      this.setState({
        errorMessage: ""
      });
    },
    handleMatesNameChange: function(e) {
      this.setState({
        matesName: e.target.value
      });
      this.setState({
        showResults: false
      });
      return this.setState({
        errorMessage: ""
      });
    },
    handleSubmit: function(e) {
      var matesName, result, yourName;
      e.preventDefault();
      yourName = this.state.yourName.trim();
      matesName = this.state.matesName.trim();
      if (yourName.length < 1) {
        this.setState({
          errorMessage: "Please enter your name"
        });
      } else if (matesName.length < 1) {
        this.setState({
          errorMessage: "Please enter your friend's name"
        });
      } else {
        result = compareEngine(yourName, matesName);
        this.setState({
          score: result
        });
        this.setState({
          showResults: true
        });
      }
    },
    render: function() {
      var resultComponent;
      return form({
        className: "Cupid",
        onSubmit: this.handleSubmit
      }, h1(null, "Friendship Rating ¯\\_(ツ)_/¯"), span({
        className: "error"
      }, this.state.errorMessage), label({
        htmlFor: "your-name"
      }, input({
        type: "text",
        className: "input",
        id: "your-name",
        autoComplete: false,
        placeholder: "Your name",
        onChange: this.handleyourNameChange,
        state: this.state.yourName
      })), span({
        className: "and"
      }, "and"), label({
        htmlFor: "mates-name"
      }, input({
        type: "text",
        className: "input",
        id: "mates-name",
        autoComplete: false,
        placeholder: "Your friends's name",
        onChange: this.handleMatesNameChange,
        value: this.state.matesName
      })), button({
        className: "button",
        type: "submit"
      }, "check"), resultComponent = React.createFactory(Results), this.state.showResults ? resultComponent({
        score: this.state.score
      }) : void 0);
    }
  });

  ReactDOM.render(React.createElement(Cupid, null), document.getElementById("container"));

}).call(this);
